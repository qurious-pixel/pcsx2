name: AppImage Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - z-app-test2
    paths-ignore:
      - .gitignore
      - "**/*.md"
      - .clang-format
      - debian-packager/
      - bin/PCSX2_keys.ini.default
      - "pcsx2/PAD/Windows/**"
  pull_request:
    branches:
      - master
    paths-ignore:
      - .gitignore
      - "**/*.md"
      - .clang-format
      - debian-packager/
      - bin/PCSX2_keys.ini.default
      - "pcsx2/PAD/Windows/**"

jobs:
  build:
    strategy:
      # Prevent one build from failing everything (although maybe those should be included as experimental builds instead)
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            platform: x86
            compiler: gcc
            detail: -appimage
            experimental: true
          - os: ubuntu-18.04
            platform: x64
            compiler: gcc
            experimental: true
            detail: -appimage

    name: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    # Set some sort of timeout in the event of run-away builds.  We are limited on concurrent jobs so, get rid of them.
    timeout-minutes: 30

    steps:
      # NOTE - useful for debugging
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: |
      #     echo "$GITHUB_CONTEXT"
      #     echo ${{ github.event.pull_request.title }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: ccache cache files
        uses: actions/cache@v2.1.6
        with:
          path: .ccache
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-

      - name: Checkout Submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive --jobs 2

      # -- SETUP CCACHE - https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v2.1.6
        with:
          path: .ccache
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-

      - name: Prepare Artifact Metadata
        id: artifact-metadata
        shell: bash
        run: |
          ARCH=$([ "${{ matrix.platform }}" == x86 ] && echo "32bit" || echo "64bit")
          ARTIFACT_NAME=""
          if [ ${{ github.event_name }} == "pull_request" ]; then
            PR_SHA=$(git rev-parse --short "${{ github.event.pull_request.head.sha }}")
            ARTIFACT_NAME="PCSX2-${ARCH}"
            if [ ! -z "${{ github.event.pull_request.number }}" ]; then
              PR_NUM=${{ github.event.pull_request.number }}
              ARTIFACT_NAME="${ARTIFACT_NAME}-pr[${PR_NUM}]"
            fi
            ARTIFACT_NAME="${ARTIFACT_NAME}-sha[${PR_SHA}]"
            if [ ! -z "${{ github.event.pull_request.title }}" ]; then
              PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | tr -cd '[a-zA-Z0-9[:space:]]_-')
              ARTIFACT_NAME="${ARTIFACT_NAME}-title["${PR_TITLE}""
            fi
          else
            SHA=$(git rev-parse --short "$GITHUB_SHA")
            ARTIFACT_NAME="PCSX2-${ARCH}-sha[${SHA}"
          fi
          TRIMMED_ARTIFACT_NAME=$(printf "%.199s]" "$ARTIFACT_NAME")
          echo "name=$TRIMMED_ARTIFACT_NAME"
          echo "##[set-output name=name;]${TRIMMED_ARTIFACT_NAME}"

      - name: Install Packages
        continue-on-error: true
        id: packages
        run: |
          if [ ${{ matrix.platform }} = x86 ]; then
            PKGARCH=i386
            sudo dpkg --add-architecture i386
          else
            PKGARCH=amd64
          fi
          echo "PKGARCH $PKGARCH"
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update 
          DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -y ccache:${PKGARCH} cmake curl:${PKGARCH} \
          dialog:${PKGARCH} fuse:${PKGARCH} gcc-10-multilib g++-10-multilib gettext:${PKGARCH} \
          libaio-dev:${PKGARCH} libasound2-dev:${PKGARCH} libbz2-dev:${PKGARCH} libcggl:${PKGARCH} libegl1-mesa-dev:${PKGARCH} \
          libgl1-mesa-dev:${PKGARCH} libgles2-mesa-dev:${PKGARCH} libglew-dev:${PKGARCH} libglvnd-dev:${PKGARCH} libgtk-3-dev:${PKGARCH} libgtk2.0-dev:${PKGARCH} \
          libjack-jackd2-dev:${PKGARCH} libjpeg-dev:${PKGARCH} liblzma-dev:${PKGARCH} liblzma5:${PKGARCH} libpcap0.8-dev:${PKGARCH} libpng++-dev:${PKGARCH} \
          libpng-dev:${PKGARCH} libportaudiocpp0:${PKGARCH} libsamplerate0-dev:${PKGARCH} libsdl1.2-dev:${PKGARCH} libsdl2-dev:${PKGARCH} \
          libsoundtouch-dev:${PKGARCH} libwxgtk3.0-dev:${PKGARCH} libwxgtk3.0-gtk3-dev:${PKGARCH} libxext-dev:${PKGARCH} libxml2-dev:${PKGARCH} \
          libxml2-dev:${PKGARCH} ninja-build nvidia-cg-toolkit:${PKGARCH} portaudio19-dev:${PKGARCH} \
          wget:${PKGARCH} zenity:${PKGARCH} zlib1g-dev:${PKGARCH} \
          libgdk-pixbuf2.0-dev:${PKGARCH} \
          libpango1.0-dev:${PKGARCH} libatk1.0-dev:${PKGARCH} libatk-bridge2.0-dev:${PKGARCH} \
          libcairo2-dev:${PKGARCH} libfontconfig1-dev:${PKGARCH} libpango1.0-dev:${PKGARCH} python:${PKGARCH} \
          libdbus-1-dev:${PKGARCH} libibus-1.0-dev:${PKGARCH}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
          cd /tmp
          curl -sSfLO https://github.com/NixOS/patchelf/releases/download/0.12/patchelf-0.12.tar.bz2        
          tar xvf patchelf-0.12.tar.bz2
          cd patchelf-0.12*/ 
          ./configure
          make && sudo make install

      - name: Build Binary
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
          name: ${{ steps.artifact-metadata.outputs.name }}
        run: |
          if [ ${{ matrix.platform }} = x86 ]; then
            toolfile=cmake/linux-compiler-i386-multilib.cmake
          fi
          mkdir build && cd build
          cmake ..                                    \
          -DCMAKE_C_COMPILER=/usr/lib/ccache/gcc      \
          -DCMAKE_CXX_COMPILER=/usr/lib/ccache/g++    \
          -DCMAKE_BUILD_TYPE=Release                  \
          -DPACKAGE_MODE=TRUE                         \
          -DXDG_STD=TRUE                              \
          -DDISABLE_ADVANCE_SIMD=TRUE                 \
          -DCMAKE_INSTALL_LIBDIR="/tmp/"              \
          -DCMAKE_INSTALL_DATADIR="/tmp/"             \
          -DCMAKE_INSTALL_DOCDIR="/tmp/PCSX2"         \
          -DOpenGL_GL_PREFERENCE="LEGACY"             \
          -DOPENGL_opengl_LIBRARY=""                  \
          -DCMAKE_TOOLCHAIN_FILE=$toolfile            \
          -GNinja
          ninja
          ls -al bin/

      - name: Package AppImage
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
          name: ${{ steps.artifact-metadata.outputs.name }}
        run: |
          echo "${PLATFORM}"
          if [ "${PLATFORM}" == "x86" ]; then
            APPARCH="i686"
            ARCH="i386"
          else
            APPARCH="x86_64"
            ARCH="x86_64"
          fi
          BUILDPATH=$GITHUB_WORKSPACE/build
          BUILDBIN=$BUILDPATH/pcsx2
          cd /tmp
          curl -sSfLO "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-$ARCH.AppImage"
          chmod a+x linuxdeploy*.AppImage
          ./linuxdeploy-$ARCH.AppImage --appimage-extract
          mv /tmp/squashfs-root/usr/bin/patchelf /tmp/squashfs-root/usr/bin/patchelf.orig
          sudo cp /usr/local/bin/patchelf /tmp/squashfs-root/usr/bin/patchelf
          cd $GITHUB_WORKSPACE
          mkdir -p squashfs-root/usr/bin
          ls -al $BUILDBIN
          cp -P "$BUILDBIN"/PCSX2 $GITHUB_WORKSPACE/squashfs-root/usr/bin/
          patchelf --set-rpath /tmp/PCSX2 $GITHUB_WORKSPACE/squashfs-root/usr/bin/PCSX2
          cp ./pcsx2/gui/Resources/AppIcon64.png ./squashfs-root/PCSX2.png
          cp ./linux_various/PCSX2.desktop.in ./squashfs-root/PCSX2.desktop 
          sed -i -e 's|Categories=@PCSX2_MENU_CATEGORIES@|Categories=Game;Emulator;|g' ./squashfs-root/PCSX2.desktop
          sed -i -e 's|__GL_THREADED_OPTIMIZATIONS=1|__GL_THREADED_OPTIMIZATIONS=0|g' ./squashfs-root/PCSX2.desktop
          curl -sSfL https://github.com/AppImage/AppImageKit/releases/download/continuous/runtime-$APPARCH -o ./squashfs-root/runtime
          mkdir -p squashfs-root/usr/share/applications && cp ./squashfs-root/PCSX2.desktop ./squashfs-root/usr/share/applications
          mkdir -p squashfs-root/usr/share/icons && cp ./squashfs-root/PCSX2.png ./squashfs-root/usr/share/icons
          mkdir -p squashfs-root/usr/share/icons/hicolor/scalable/apps && cp ./squashfs-root/PCSX2.png ./squashfs-root/usr/share/icons/hicolor/scalable/apps
          mkdir -p squashfs-root/usr/share/pixmaps && cp ./squashfs-root/PCSX2.png ./squashfs-root/usr/share/pixmaps
          mkdir -p squashfs-root/usr/lib/
          cp ./.github/workflows/scripts/linux/AppRun $GITHUB_WORKSPACE/squashfs-root/AppRun
          curl -sSfL "https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-$APPARCH" -o $GITHUB_WORKSPACE/squashfs-root/AppRun-patched
          chmod a+x ./squashfs-root/AppRun
          chmod a+x ./squashfs-root/runtime
          chmod a+x ./squashfs-root/AppRun-patched
          echo "$name" > $GITHUB_WORKSPACE/squashfs-root/version.txt
          mkdir -p $GITHUB_WORKSPACE/squashfs-root/usr/bin/{plugins,vm}
          cp -r $GITHUB_WORKSPACE/bin/Langs $GITHUB_WORKSPACE/squashfs-root/usr/bin/
          cp $GITHUB_WORKSPACE/bin/docs/{Configuration_Guide.pdf,PCSX2_FAQ.pdf} $GITHUB_WORKSPACE/squashfs-root/usr/bin/plugins
          cp $GITHUB_WORKSPACE/bin/cheats_ws.zip $GITHUB_WORKSPACE/squashfs-root/usr/bin/plugins
          if [[ -e "$BUILDPATH/plugins" ]]; then
            find "$BUILDPATH/plugins" -iname '*.so' -exec cp {} $GITHUB_WORKSPACE/squashfs-root/usr/bin/plugins \;
          fi
          cp ./bin/GameIndex.yaml $GITHUB_WORKSPACE/squashfs-root/usr/bin/plugins/GameIndex.yaml
          export UPD_INFO="gh-releases-zsync|PCSX2|pcsx2|latest|$name.AppImage.zsync"
          export OUTPUT=$name.AppImage
          /tmp/squashfs-root/AppRun --appdir=$GITHUB_WORKSPACE/squashfs-root/ -d $GITHUB_WORKSPACE/squashfs-root/PCSX2.desktop -i $GITHUB_WORKSPACE/squashfs-root/PCSX2.png --output appimage
          mkdir -p $GITHUB_WORKSPACE/artifacts/
          ls -al .
          mv "$name.AppImage" $GITHUB_WORKSPACE/artifacts # && mv "$name.AppImage.zsync" $GITHUB_WORKSPACE/artifacts
          chmod -R 777 ./artifacts
          cd ./artifacts
          ls -al .
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifact-metadata.outputs.name }}
          path: artifacts
